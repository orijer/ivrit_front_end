import "./Tutorial.css"

import { useEffect } from "react";

const sections = [
    "tutorial-page-introduction",
    "tutorial-page-prints",
    "tutorial-page-variables",
    "tutorial-page-constants",
    "tutorial-page-input",
    "tutorial-page-conditions",
    "tutorial-page-loops",
    "tutorial-page-functions",
    "tutorial-page-lists"
  ];

function Tutorial() {

    useEffect(() => {
        const handleScroll = () => {
            let currentSectionId = null;

            for (const id of sections) {
                const section = document.getElementById(id);
                if (!section) continue;

                const rect = section.getBoundingClientRect();
                if (rect.top <= 120 && rect.bottom >= 120) {
                    currentSectionId = id;
                    break;
                }
            }

            document.querySelectorAll('.nav-link').forEach((el) => {
                el.classList.remove('active');
            });

            if (currentSectionId) {
                const activeLink = document.querySelector(`a[href="#${currentSectionId}"]`);
                if (activeLink) activeLink.classList.add('active');
            }
        };

        window.addEventListener('scroll', handleScroll);
        handleScroll(); // call once on load

        return () => window.removeEventListener('scroll', handleScroll);
    }, []);
      

    return (
        <div id="tutorial-page">
            <div className="container-fluid">
                <div className="row">

                    {/* Sidebar */}
                    <nav className="col-md-3 col-lg-2 d-none d-md-block sidebar">
                        <div style={{ position: 'sticky', top: '0px' }}>
                            <ul className="nav flex-column p-2">
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-introduction">הקדמה</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-prints">הדפסות</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-variables">משתנים</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-constants">קבועים</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-input">קלט</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-conditions">תנאים</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-loops">לולאות</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-functions">פונקציות</a>
                                </li>
                                <li className="nav-item">
                                    <a className="nav-link fw-bold" href="#tutorial-page-lists">רשימות</a>
                                </li>
                            </ul>
                        </div>
                    </nav>

                    {/* Main Content */}
                    <main className="col-md-9 col-lg-10 px-md-4">
                        <section id="tutorial-page-introduction">
                            <h1>הקדמה</h1>
                            <p>
                                שפות תכנות הן שפות לכל דבר ועניין, אך במקום לשמש לתקשורת בין אנשים אנו משתמשים בהן בשביל להסביר למחשב מה לעשות. <br />
                                בעזרתן יוצרים אתרים (כמו האתר הזה ממש), משחקים, אפליקציות, ועוד. <br /> <br />
                                יש מבחר גדול של שפות תכנות, כמו JAVA, C, PYTHON ועוד, אך אנחנו נלמד פה איך להשתמש בשפה פשוטה בשם Ivrit, שכל המילים והפקודות בה הן בעברית. היא שפה מספיק פשוטה כדי שכל אחד יוכל ללמוד אותה, אפילו בלי ניסיון קודם בתכנות. <br />
                                מומלץ לפתוח בדפדפן חלונית נוספת עם עמוד <a href="/editor">העורך</a>, שם תוכלו להריץ את הקוד שכתוב כאן, ותוכלו אפילו לשנות אותו ולראות איך זה משפיע על התכנית.
                            </p>

                            <p>
                                כל תוכנית מורכבת משורות. התכנית מתחילה לפעול מהשורה הראשונה בקובץ, ולאחר ביצוע כל שורה מתקדמים לשורה שמתחתיה. כל שורה מכילה פקודה, שאותן נלמד בעמוד הזה לאט לאט. חשוב לשים לב שבכל שורה יכולה להיות לכל היותר פקודה אחת בלבד- שורות ריקות מותרות ולמעשה לא עושות כלום.
                            </p>
                        </section>

                        <section id="tutorial-page-prints">
                            <h1>הדפסות</h1>

                            <p className="mb-0">
                                הדבר הבסיסי ביותר בכל שפת תכנות הוא כתיבה אל המסך באמצעות קוד. לדבר הזה קוראים הדפסה. <br />
                                למזלנו, הדפסות ב Ivrit הן פשוטות מאוד! כל מה שצריך הוא לכתוב בשורה את המילה `הדפס` ומיד אחריה את מה שאנחנו רוצים לכתוב אל המסך. <br /> <br />
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                הדפס 8
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה ידפיס, כלומר יכתוב, למסך את המספר 8. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                הדפס 13.72
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה ידפיס, כלומר יכתוב למסך את המספר 13.72. <br /> <br />
                                דוגמה 3:
                            </p>

                            <div class="code-snippet">
                                הדפס "שימו לב, טקסט צריך להכיל מסביבו מרכאות בהדפסה"
                            </div>

                            <p>
                                קטע הקוד הזה ידפיס את המשפט שכתוב בתוך המרכאות. שימו לב שהמרכאות הכרחיות פה. הקוד לא יעבוד כרצוי בלעדיהן! <br />
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>כתבו קטע קוד שמדפיס את שמכם.</li>
                                <li>כתבו קטע קוד שמדפיס את המתכון האהוב עליכם.</li>
                                <li>כתבו קטע קוד שמדפיס ריבוע של כוכביות. תבחרו את אורך הצלע כרצונכם.</li>
                            </ul>
                        </section>

                        <section id="tutorial-page-variables">
                            <h1>משתנים</h1>

                            <p className="mb-0">
                                זה עובד טוב, אבל תדמיינו שאתם עכשיו מתכנתים משחק ואתם בוחרים להדפיס את השם שלכם במאה מקומות בקוד. אם יום אחד תרצו לשנות את השם שלכם, תצטרכו לעבור על כל מאה השורות האלו באופן ידני ולשנות את השם לשם החדש. זה מאוד בזבזני ולא נוח. במקום, אפשר להשתמש במשתנים. <br />
                                משתנים הם הדרך שלנו לשמור ערכים בתוך התוכנה, לשנות אותם ולהשתמש בהם אחר כך בהמשך הקוד. כך למשל, נוכל ליצור משתנה אחד שיכיל את השם שלכם, ולהדפיס אותו ישירות. אם בעתיד תרצו לשנות את השם שלכם תצטרכו לשנות רק שורה אחת בקוד- את השורה של המשתנה! <br /> <br />
                                שימוש נוסף וכנראה העיקרי של משתנים הוא בשמירת מצב קיים. ללא משתנים אין לתכנית שלנו יכולת זכרון בכלל, מה שמגביל מאוד את סוג התוכניות שנוכל לכתוב. <br />
                                ב Ivrit יש 4 סוגי משתנים: שלמים, עשרוניים, משפטים וטענות. כל סוג של משתנה נקרא טיפוס.
                            </p>

                            <ul>
                                <li>שלמים מכילים מספרים שלמים כמו 0, 5, 1234567890, אך גם מספרים שליליים כמו 5-, 924-.</li>
                                <li>עשרונים מכילים מספרים עשרוניים (לא שלמים) כמו 0.3, 178.9, 31.7-</li>
                                <li>משפטים מכילים מילים כמו "חתול", "ילד וילדה". חשוב לשים לב לגרשיים.</li>
                                <li>טענות הן תמיד או אמת או שקר. אלה שני הערכים היחידים עבור משתנים מטיפוס טענות, ויש להם שימושים מיוחדים בשפה.</li>
                            </ul>

                            <h4>יצירת משתנים</h4>

                            <p className="mb-0">
                                בשביל להגדיר משתנה נשתמש בפקודה הבאה:
                            </p>

                            <div class="code-snippet">
                                משתנה טיפוס_המשתנה שם_המשתנה = ערך
                            </div>

                            <p className="mb-0">
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ_שלם = 5
                            </div>

                            <p className="mb-0">
                                הקוד הזה מייצר משתנה חדש בשם מ_שלם, שמכיל מספרים שלמים. הערך שאנחנו נותנים לו הוא 5. אנחנו יכולים לבחור איזה שם שנרצה למשתנה, אך כדאי לתת לו שם הגיוני שמסביר על התפקיד שלו בקוד. חשוב לשים לב ששם המשתנה לא יכול להכיל רווחים, ושהערך שנתנו לו (במקרה הזה 5), מתאים לטיפוס של המשתנה (במקרה הזה שלם, ואכן 5 הוא מספר שלם). אי עמידה בתנאים האלה עלולה לגרום לתכנית שלנו לקרוס בזמן לא צפוי. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                משתנה עשרוני פאי = 3.1415
                            </div>

                            <p className="mb-0">
                                הקוד הזה מייצר משתנה חדש בשם פאי, שמכיל מספרים עשרוניים. הערך שאנחנו נותנים לו הוא 3.1415. <br /> <br />
                                דוגמה 3:
                            </p>

                            <div class="code-snippet">
                                משתנה משפט תאריך = "היום התאריך: 5.6.2025"
                            </div>

                            <p className="mb-0">
                                הקוד הזה מייצר משתנה חדש בשם תאריך, שמכיל משפטים. שימו לב למרכאות- בלעדיהן הקוד לא היה עובד. <br /> <br />
                                דוגמה 4:
                            </p>

                            <div class="code-snippet">
                                משתנה טענה מ_טענה = אמת
                            </div>

                            <p>
                                הקוד הזה מייצר משתנה חדש בשם מ_טענה, שמכיל טענות. חשוב לשים לב שאחרי השווה יכולנו לשים רק את אמת או את שקר ולא שום ערך אחר. בנוסף, אם יצרנו משתנה לא ניתן ליצור משתנה נוסף עם אותו שם, אפילו אם מנסים להשתמש בטיפוס אחר.
                            </p>

                            <h4>שימוש במשתנים</h4>

                            <p className="mb-0">
                                הדפסת הערך של משתנה היא מאוד פשוטה. אם נחזור לדוגמה 1, ביצוע הפקודה:
                            </p>

                            <div class="code-snippet">
                                הדפס מ_שלם
                            </div>

                            <p className="mb-0">
                                תדפיס למסך את הערך 5 כפי שהיינו מצפים. <br /> <br />
                                ייתכן ובמהלך ריצת התכנית נרצה לעדכן את הערך של משתנה- למשל דמיינו שאתם מתכנתים משחק, היה מאוד הגיוני לשמור את החיים של השחקן במשתנה מסוג שלם, ולעדכן אותו במהלך המשחק. גם זה מאוד פשוט ב Ivrit ברגע שכבר יצרנו את המשתנה. <br /> <br />
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם כסף = 100 <br />
                                כסף = 200
                            </div>

                            <p className="mb-0">
                                הקוד הזה מגדיר משתנה בשם כסף עם הערך 100, ובהמשך משנה את הערך להיות 200. נשים לב שבזמן שינוי המשתנה כסף משתמשים רק בשמו. לא צריך להשתמש במילה משתנה ולא בטיפוס שלו בזמן השינוי. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם כסף = 100 <br />
                                כסף = כסף + 50
                            </div>

                            <p className="mb-0">
                                הדוגמה הזאת כבר יותר מורכבת, וכדאי לקרוא אותה משמאל לימין. קודם מחשבים את כסף + 50. כיוון שהערך של כסף באותו זמן הוא 100, החישוב נותן לנו את הערך 150. התוצאה הזאת מוכנסת לתוך כסף ולכן בסוף השורה השנייה הערך של כסף הוא 150. <br /> <br />
                                דוגמה 3:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 1 <br />
                                מ1 = מ1 * 2 <br />
                                משתנה שלם מ2 = 1 <br />
                                מ2 = מ2 + מ2
                            </div>

                            <p className="mb-0">
                                הקוד הזה מתחיל בליצור את המשתנה מ1 עם הערך 1, ובשורה השנייה מכפיל את ערכו ב 2. לכן הערך של מ1 בסוף התוכנית הוא 2. בשורה השלישית נוצר משתנה חדש בשם מ2 שגם הערך שלו הוא 1. בשורה הרביעית הופכים את הערך שלו להיות מ2+מ2 שזה למעשה 1+1, אז גם הערך של מ2 בסוף התכנית הוא 2. <br />
                                בדיוק באותו אופן ניתן לעשות חיסור וחילוק. <br /> <br />
                                עשרוניים עובדים בצורה זהה לחלוטין. <br /> <br />
                                דוגמה 4:
                            </p>

                            <div class="code-snippet">
                                משתנה משפט מ = "שבת " <br />
                                מ = מ + "שלום"
                            </div>

                            <p className="mb-0">
                                חיבור משפטים נקרא שרשור, וכתוצאה ממנו מקבלים משפט חדש שמכיל את המשפט הימני, ומיד אחריו את המשפט השמאלי. לכן הערך הסופי של מ בדוגמה הנ"ל יהיה "שבת שלום". <br /> <br />
                                דוגמה 5:
                            </p>

                            <div class="code-snippet">
                                משתנה טענה מ = אמת <br />
                                מ = מ וגם שקר <br />
                                מ = מ או אמת
                            </div>

                            <p className="mb-0">
                                על טענות יש שתי פעולות עיקריות: "וגם", "או". פעולת "וגם" מחזירה אמת אם גם מימינה וגם משמאלה יש אמת, ואחרת היא מחזירה שקר. אז אמת וגם שקר הוא שקר, שקר וגם שקר הוא שקר, ורק אמת וגם אמת היא אמת. <br />
                                פעולת "או" מחזירה אמת אם מימינה או משמאלה (או שניהם) הם אמת. אז שקר או שקר הוא שקר, אבל שקר או אמת הוא אמת, וגם אמת או אמת הוא אמת. לכן, לאחר ביצוע השורה השנייה הערך של מ יהיה שקר כי אמת וגם שקר הוא שקר, ולאחר ביצוע השורה השלישית הערך של מ יהיה אמת כי שקר או אמת הוא אמת. <br /> <br />
                                דוגמה 6:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 5 <br />
                                מתשנה שלם מ2 = 10 <br />
                                משתנה שלם סכום = מ1 + מ2
                            </div>

                            <p className="mb-0">
                                בסוף הקוד הזה הערך של סכום יהיה 15, שזה באמת הערך של מ1 ועוד ערך של מ2. <br /> <br />
                                דוגמה 7:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 7 <br />
                                מ1 = 2 % מ1 <br />
                                הדפס מ1
                            </div>

                            <p className="mb-0">
                                פה אנחנו רואים פעולה חדשה: "%". היא מחשבת את שארית החלוקה של המספר שמשמאל במספר שמימין. במקרה שלנו, אם מחלקים את מ1 (כלומר את 7) ב 2 מקבלים 3 ושארית 1, ולכן הערך הסופי שיודפס פה הוא השארית הזו שהיא 1. <br /> <br />
                                ייתכן ונרצה לעשות יותר מפעולה אחת באותה השורה, למשל להכפיל משתנה ב 2 ולהוסיף למכפלה 5. בשביל לבצע זאת בסדר הנכון עלינו להשתמש בסוגריים, כך:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 5 <br />
                                מ1 = (מ1 * 2) + 5
                            </div>

                            <p>
                                בסוף הקוד הזה הערך של מ1 יהיה 15, כפי שהיינו מצפים. <br /> <br />
                            </p>

                            <h4>מחיקה</h4>

                            <p className="mb-0">
                                עד עכשיו ראינו איך ליצור משתנים, אך יש מקרים שבהם נרצה דווקא למחוק משתנים מהתכנית שלנו. בשביל לעשות זאת נשתמש בפקודה מחק, ואחריה את שם המשתנה שנרצה למחוק. דוגמה:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 5 <br />
                                מחק מ1 <br />
                                משתנה עשרוני מ1 = 10
                            </div>

                            <p>
                                השורה הראשונה מייצרת משתנה חדש בשם מ1. השורה השנייה מוחקת אותו מהתכנית, כך שלא ניתן יותר להשתמש במשתנה שנוצר בשורה הראשונה. מכיוון שמחקנו את המשתנה מהתכנית, ניתן עכשיו להגדיר משתנה חדש עם אותו השם בלי בעיה.
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>ראשית, כתבו קטע קוד שמדפיס את השם שלכם 5 פעמים. לאחר מכן, תשנו את קטע הקוד כך שידפיס את השם של אדם אחר. זה דורש לשנות את כל שורות הקוד... כעת צרו משתנה חדש שיכיל את השם שלכם והשתמשו בו בהדפסות.</li>
                                <li>כתבו קטע קוד שיוצר משתנה עשרוני עם ערך לבחירתכם. עדכנו את ערכו לערך אחר והדפיסו את התוצאה.</li>
                                <li>כתוב קטע קוד שיוצר משתנה מסוג טענה. נסו את כל האפשרויות עבור שימוש במילה "וגם" כדי להבין יותר טוב את משמעותה.</li>
                            </ul>
                        </section>

                        <section id="tutorial-page-constants">
                            <h1>קבועים</h1>

                            <p className="mb-0">
                                יש מקרים שבהם נרצה לשמור מידע במהלך התכנית, אך המידע הזה לא צריך להשתנות. בשביל זה ניתן להשתמש בקבוע במקום במשתנה. מהרגע שהקבוע נוצר לא ניתן לשנות את ערכו בשום צורה. יוצרים קבועים באותה דרך שבה יוצרים משתנים, רק שאת המילה "משתנה" מחליפים במילה "קבוע". דוגמה:
                            </p>

                            <div class="code-snippet">
                                קבוע עשרוני פאי = 3.1415
                            </div>

                            <p>
                                הקוד הזה מייצר קבוע בשם פאי שמכילאת הערך 3.1415, ולא ניתן לשנות אותו בהמשך התכנית. זה גם הגיוני, שכן הקבוע המתמטי פאי אינו אמור להשתנות במהלך התכנית, ולכן אין סיבה להגדיר אותו כמשתנה ולא כקבוע.
                            </p>
                        </section>

                        <section id="tutorial-page-input">
                            <h1>קלט</h1>

                            <p className="mb-0">
                                עד עכשיו ראינו רק תכניות עצמאיות, שלא היו צריכות מידע נוסף מתחילתן ועד סופן. לפעמים דווקא נרצה שתכנית תחכה שמשתמש יכתוב לה משהו, למשל מה שמו או מה הסיסמה שלו. בשביל זה ניתן להשתמש בפקודה קלוט-ל. דוגמה:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                קלוט-ל מ <br />
                                הדפס מ
                            </div>

                            <p className="mb-0">
                                התכנית הזאת מתחילה בלהגדיר משתנה חדש בשם מ שיכיל מספרים שלמים. נתנו לו את הערך 0, אך יכולנו לבחור כל ערך וזה לא היה משנה דבר. לאחר מכן השתמשנו בפקודה "קלוט-ל" ביחד עם שם המשתנה. כשהמחשב יריץ את הפקודה הזאת הוא יחכה שהמשתמש יתן ערך נוסף. בעורך שבאתר ניתן להכניס את הערך הזה בתיבת הטקסט שבשמאל הדף ולשלוח בעזרת הכפתור הצמוד. כשהמחשב יקבל את הקלט הנוסף הוא ישנה את ערכו של מ אל הערך הזה, ורק לאחר מכן ימשיך לשורה הבאה, בה נדפיס את הערך שהוכנס על די המשתמש.
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>כתבו קטע קוד שמבקש מהמשתמש להכניס את שמו, והדפיסו בשורה אחת: שלום + השם שהוכנס.</li>
                                <li>כתבו קטע קוד שמבקש מהמשתמש להכניס שני מספרים ומדפיס את סכומם.</li>
                                <li>כתבו קטע קוד שמבקש מהמשתמש להכניס שתי טענות (אמת או שקר) ומדפיס את תוצאת ה "וגם" ואת תוצאת ה "או" של הערכים האלו.</li>
                            </ul>
                        </section>

                        <section id="tutorial-page-conditions">
                            <h1>תנאים</h1>

                            <p className="mb-0">
                                כל קטעי הקוד שראינו עד עכשיו היו סדרתיים, כלומר תמיד התבצעו שורה אחרי שורה, מהשורה הראשונה ועד השורה האחרונה. במקרים מסוימים נרצה לבצע פעולה רק אם תנאי מסויים מתקיים, למשל לוודא שהמשתמש הכניס את הסיסמה הנכונה. בדיוק בשביל זה משתמשים בתנאים. <br />
                                כל תנאי נראה כך:
                            </p>

                            <div class="code-snippet">
                                אם (תנאי) <br />
                                קוד1 <br />
                                אחרת <br />
                                קוד2 <br />
                                סוף <br />
                                קוד3
                            </div>

                            <p className="mb-0">
                                התנאי תמיד צריך להיות ביטוי מסוג טענה, כלומר:
                            </p>

                            <ul>
                                <li>אמת\שקר.</li>
                                <li>משתנה מסוג טענה</li>
                                <li>ערך\משתנה מספריים &gt; ערך\משתנה מספריים.</li>
                                <li>ערך\משתנה מספריים &lt; ערך\משתנה מספריים.</li>
                                <li>ערך\משתנה שווה ערך\משתנה.</li>
                                <li>ערך\משתנה לא-שווה ערך\משתנה.</li>
                                <li>שני ביטויים מסוג טענה שביניהם יש וגם.</li>
                                <li>שני ביטויים מסוג טענה שביניהם יש או.</li>
                            </ul>

                            <p className="mb-0">
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                קלוט-ל מ <br />
                                אם (מ &gt; 3) <br />
                                הדפס "המשתנה מ מכיל ערך שגדול משלוש" <br />
                                אחרת <br />
                                הדפס "המשתנה מ מכיל ערך שלא גדול משלוש" <br />
                                סוף <br />
                                הדפס "סיימנו"
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה מתחיל בלקבל מהמשתמש מספר שלם. לאחר מכן, מבצעים בדיקה האם הערך שנקלט גדול מ 3. אם זה מתקיים מבצעים את קטע הקוד שאחרי אם, כלומר מדפיסים שהמשתנה מ מכיל ערך שגדול מ 3, ואז מגיעים לסוף ומדפיסים שסיימנו. אם זה לא מתקיים מבצעים את קטע הקוד שלאחר המילה אחרת, ובסיומו מדפיסים שסיימנו. <br />
                                חשוב לשים לב שבשני המקרים קטע הקוד שמבוצע ב "אם" וקטע הקוד שמבוצע ב "אחרת" לא חייב להיות רק שורה אחת. הוא יכול להיות כמה שורות, והוא יכול אפילו להיות ריק. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                קלוט-ל מ <br />
                                משתנה שלם שארית = 2 % מ <br />
                                אם (מ שווה 0) <br />
                                הדפס "המשתנה מ מכיל ערך זוגי" <br />
                                אחרת <br />
                                הדפס "המשתנה מ מכיל ערך אי-זוגי" <br />
                                סוף <br />
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה שוב קולט מהמשתמש מספר. אם המספר זוגי (כלומר שארית החלוקה של המספר ב-2 היא 0) מדפיסים שהמספר זוגי ואחרת מדפיסים שהוא אי-זוגי. <br /> <br />
                                דוגמה 3:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 0 <br />
                                משתנה שלם מ2 = 0 <br />
                                משתנה שלם קטן = 0 <br />
                                משתנה שלם גדול = 0 <br />
                                קלוט-ל מ1 <br />
                                קלוט-ל מ2 <br />
                                אם (מ1 &lt; מ2) <br />
                                הדפס "המספר הראשון קטן מהמספר השני" <br />
                                קטן = מ1 <br />
                                גדול = מ2 <br />
                                אחרת <br />
                                הדפס "המספר הראשון גדול או שווה למספר השני" <br />
                                סוף <br />
                                הדפס "המספר הקטן הוא: " + קטן <br />
                                הדפס "המספר הגדול הוא: " + גדול <br />
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה כבר יותר ארוך ומסובך, אבל הוא משתמש בדיוק באותם עקרונות. בהתחלה קולטים מהמשתמש שני מספרים שלמים ושמים אותם במשתנים מ1, מ2. אם מ1 קטן מ-מ2 ה- "אם" מתקיים ולכן שמים במשתנה קטן את הערך של מ1 ובמשתנה גדול את הערך של מ2, כמו שרצינו. אם מ1 לא קטן מ- מ2 עושים בדיוק הפוך. בסוף מדפיסים את הערכים שבמשתנים קטן, גדול. <br /> <br />
                                דוגמה 4:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                קלוט-ל מ <br />
                                אם (מ &lt; 10) <br />
                                אם (מ &gt; 5) <br />
                                הדפס "המספר שנקלט קטן מעשר אבל גדול מחמש" <br />
                                אחרת <br />
                                הדפס "המספר שנקלט קטן מחמש" <br />
                                סוף <br />
                                אחרת <br />
                                סוף <br />
                            </div>

                            <p>
                                בקטע הקוד הזה יש שני תנאים: פנימי וחיצוני. התנאי החיצוני בודק אם הערך שנקלט קטן מ-10, ואם כן מבצע את התנאי הפנימי. התנאי הפנימי נגמר ב "סוף" הראשון, והתנאי החיצוני נגמר ב "סוף" השני. סה"כ, אם המספר שנקלט קטן מעשר וגדול מחמש הקוד מדפיס על כך, אם המספר שנקלט קטן גם מחמש הקוד מדפיס על כך, אך אם המספר שנקלט לא קטן מעשר לא מודפס כלום. <br /> <br />
                                פה למעשה אנחנו רואים גם דוגמה לתנאי בתוך תנאי (מה שנקרא גם תנאים מקוננים), וגם דוגמה שבה לא עושים כלום במקרה שהאם לא מתקיים (לא מתבצע כלום במקרה של "אחרת").
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>כתבו קטע קוד שיוצר שני משתנים, אחד עבור שם משתמש ואחד עבור סיסמה, קולט מהמשתמש ערכים עבורם, ומוודא ששם המשתמש הוא "משתמש סודי ביותר" והסיסמה היא 123456789.</li>
                                <li>כתבו קטע קוד שמקבל מהמשתמש מספר, ומדפיס האם הוא חיובי, שלילי או אפס.</li>
                            </ul>
                        </section>

                        <section id="tutorial-page-loops">
                            <h1>לולאות</h1>

                            <p className="mb-0">
                                הרבה פעמים נרצה לבצע קטע קוד כל עוד תנאי מסויים מתקיים, או להפך- עד שתנאי מסויים יתקיים. לדבר הזה קוראים בתכנות "לולאות", והן קיימות גם ב Ivrit. <br /> <br />
                                לולאות ב Ivrit צריכות להיות במבנה הבא:
                            </p>

                            <div class="code-snippet">
                                כל עוד (תנאי) <br />
                                קוד <br />
                                סוף <br />
                            </div>

                            <p className="mb-0">
                                כאשר קטע הקוד הפנימי יכול להכיל כמה שורות שנרצה, ואפילו לולאות ותנאים פנימיים. <br /> <br />
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם פעמים = 10 <br />
                                כל עוד (פעמים &gt; 0) <br />
                                פעמים = 1 - פעמים <br />
                                הדפס "עדיין בתוך הלולאה" <br />
                                סוף <br />
                                הדפס "כבר לא בתוך הלולאה"
                            </div>

                            <p className="mb-0">
                                נשים לב שבכל פעם שקטע הקוד שבתוך הלולאה רץ, מקטינים את הערך של המשתנה "פעמים" ב-1 ומדפיסים "עדיין בתוך הלולאה". ערכו ההתחלתי הוא 10, ולכן סה"כ נדפיס "עדיין בתוך הלולאה" 10 פעמים. אחריהן יודפס "כבר לא בתוך הלולאה" פעם אחת. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם סכום = 0 <br />
                                משתנה שלם יעד = 0 <br />
                                קלוט-ל יעד <br />
                                כל עוד (יעד &gt; 0) <br />
                                סכום = סכום + יעד <br />
                                יעד = 1 - יעד <br />
                                סוף <br />
                                הדפס סכום
                            </div>

                            <p>
                                קטע הקוד הזה מקבל מהמשתמש מספר שלם ושומר אותו במשתנה "יעד". אז, כל עוד הערך שבמשתנה "יעד" גדול מאפס מוסיפים למשתנה סכום את הערך הנוכחי של "יעד" ומקטינים את הערך של "יעד" ב 1. לכן, בסוף נדפיס את סכום המספרים מאחד ועד המספר שנקלט מהמשתמש.
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>כתבו קטע קוד שמקבל מהמשתמש מספר שלם ומדפיס את סכום המספרים הזוגיים מ 1 עד למספר שנקלט.</li>
                                <li>כתבו קטע קוד שמקבל מהמשתמש מספר שלם חיובי ומדפיס את המספר הזה עצרת.</li>
                                <li>כתבו קטע קוד שמקבל מהמשתמש מספר שלם חיובי ומדפיס את 2 בחזקת המספר שנקלט. חשבו איך אפשר לעשות זאת בעזרת לולאות.</li>
                            </ul>
                        </section>

                        <section id="tutorial-page-functions">
                            <h1>פונקציות</h1>

                            <p className="mb-0">
                                כאשר כותבים תוכניות עם הרבה קוד אנו נוטים לכתוב פעמים רבות את אותם קטעי קוד פעמים רבות, בכל מיני מקומות שונים. זה מקשה מאוד גם על קריאת התכנית, וגם על שינוי שלה אם נצטרך לעשות זאת בעתיד. שימוש בפונקציות יכול מאוד להקל על כך. <br /> <br />
                                פונקציות הן קטעי קוד שניתן לקרוא להן ולהריץ מכל מקום בתכנית שלנו. כך ניתן להשתמש באותו קטע קוד פעמים רבות במהלך התכנית.  <br /> <br />
                                פונקציות ב Ivrit צריכות להיות במבנה הזה:
                            </p>

                            <div class="code-snippet">
                                פונקציה שם_הפונקציה מקבלת כלום מחזירה כלום <br />
                                קוד הפונקציה <br />
                                תחזיר
                            </div>

                            <p className="mb-0">
                                כאשר קוד הפונקציה יכול להכיל כמה שורות שנרצה. המילה "תחזיר" מסמנת לנו מתי לסיים להריץ את הפונקציה ולחזור לנקודה שבה קראנו לה. <br />
                                בשביל לקרוא לפונקציה נשתמש במילה הפעל, כך:
                            </p>

                            <div class="code-snippet">
                                הפעל שם_הפונקציה
                            </div>

                            <p className="mb-0">
                                דוגמה 1: <br />
                            </p>

                            <div class="code-snippet">
                                הדפס "תחילת הקוד" <br />
                                הפעל הדפס_שלום <br />
                                הדפס "סיימנו להפעיל את הפונקציה פעם אחת" <br />
                                הפעל הדפס_שלום <br />
                                הפעל הדפס_שלום <br />
                                הדפס "סיימנו להפעיל את הפונקציה שלוש פעמים"<br />
                                צא <br />
                                <br />
                                פונקציה הדפס_שלום מקבלת כלום מחזירה כלום <br />
                                הדפס "שלום לכם!" <br />
                                תחזיר
                            </div>

                            <p className="mb-0">
                                הקוד הזה ידפיס "תחילת הקוד", אז "שלום לכם!", אז "סיימנו להפעיל את הפונקציה פעם אחת", אז "שלום לכם!", "שלום לכם!", ובסוף "סיימנו להפעיל את הפונקציה שלוש פעמים". <br />
                                כל פעם שמפעילים את הפונקציה אנחנו למעשה מריצים את הקוד של הפונקציה מחדש, ובסיומה עוברים לשורה שלאחר שורת ההפעלה. <br /> <br />
                                זה אולי לא מאוד שימושי בפונקציות של שורה אחת, אבל אם הפונקציה "הדפס_שלום" הייתה 100 שורות, היינו חוסכים פה הרבה עבודה. <br /> <br />
                                חשוב לשים לב לפקודה "צא" שמסיימת את התכנית. אנו משתמשים בה בסוף קטע הקוד הראשי שלנו, לפני שהקוד של הפונקציות ינסה לרוץ. אם נשכח לשים את הפקודה הזו התכנית עלולה לקרוס. <br /> <br />
                                דוגמה 2:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                הדפס מ <br />
                                הפעל שינוי_מ <br />
                                הדפס מ <br />
                                צא <br />
                                <br />
                                פונקציה שינוי_מ מקבלת כלום מחזירה כלום <br />
                                מ = 5 <br />
                                תחזיר
                            </div>

                            <p className="mb-0">
                                יודפס למסך 0 ואז 5. הסיבה שמודפס 5 היא שהפונקציה שינוי_מ משנה את ערכו של המשתנה מ, אפילו אם המשתנה הזה הוגדר מחוץ לפונקציה הזאת. <br /> <br />
                                חשוב לשים לב שזה לא מונע מאיתנו להגדיר משתנים חדשים בתוף הפונקציה, לדוגמה:
                            </p>

                            <div class="code-snippet">
                                פונקציה שינוי_מ מקבלת כלום מחזירה כלום <br />
                                משתנה שלם מ_חדש = 0 <br />
                                קלוט-ל מ_חדש <br />
                                הדפס מ_חדש <br />
                                תחזיר
                            </div>

                            <p className="mb-0">
                                המשתנים שמוגדרים בתוך הפונקציה נמחקים אוטומטית בסופה ולכן לא ניתן לגשת אליהם שוב לאחר סיומה. בנוסף, ניתן להגדיר בתוך פונקציה משתנה חדש עם שם של משתנה קיים. במצב כזה, כשניגש למשתנה בפונקציה ניגע רק במשתנה החדש, בלי לשנות את המשתנה הישן, וזה יכול להיות שימושי במקרים מסוימים. דוגמה:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ = 0 <br />
                                הדפס מ <br />
                                הפעל שינוי_מ <br />
                                הדפס מ <br />
                                צא <br />
                                <br />
                                פונקציה שינוי_מ מקבלת כלום מחזירה כלום <br />
                                משתנה שלם מ = 10 <br />
                                קלוט-ל מ <br />
                                הדפס מ <br />
                                תחזיר
                            </div>

                            <p className="mb-0">
                                למרות איך שזה נראה, קטע הקוד הזה לא משנה את הערך של המשתנה "מ" שמוגדר מחוץ לפונקציה. הערך שלו נשאר 0 גם בסוף התוכנית. אם נרצה בכל זאת לשנות את ערכו אחרי שכבר הגדרנו משתנה חדש עם אותו שם נצטרך להשתמש בפקודה "מחק" כדי למחוק את המשתנה החדש, ורק אז נוכל לשנות את ערכו. <br /> <br />
                                ראינו דרך אחת להעביר ערכים לפונקציה, אבל יש דרך יותר טובה לעשות זאת. דוגמה:
                            </p>

                            <div class="code-snippet">
                                הפעל הדפס_מספר עם 81 <br />
                                צא <br />
                                <br />
                                פונקציה הדפס_מספר מקבלת שלם מ מחזירה כלום <br />
                                הדפס "המספר שקיבלנו הוא " + מ <br />
                                תחזיר <br />
                            </div>

                            <p className="mb-0">
                                בהפעלת הפונקציה אנחנו מוסיפים את המילה "עם", ואחריה את מה שאנחנו נותנים לפונקציה כקלט. בהגדרת הפונקציה אנחנו מציינים שהיא מקבלת משתנה מסוג שלם שנקרא לו מ. חשוב לשים לב שאיך שקוראים לו בתוך הפונקציה יכול להיות שונה מהשם שלו מחוץ לפונקציה. דוגמה:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם מ1 = 81 <br />
                                הפעל הדפס_מספר עם מ1 <br />
                                צא <br />
                                <br />
                                פונקציה הדפס_מספר מקבלת שלם מ2 מחזירה כלום <br />
                                הדפס "המספר שקיבלנו הוא " + מ2 <br />
                                תחזיר <br />
                            </div>

                            <p className="mb-0">
                                בדוגמה הזאת מעבירים לפונקציה רק קלט אחד, אבל אפשר להעביר כמה שנרצה, כל עוד מספר הקלטים וסוגם זהה:
                            </p>

                            <div class="code-snippet">
                                הפעל הדפס_סכום עם 81, 18 <br />
                                צא <br />
                                <br />
                                פונקציה סכום מקבלת שלם מ1, שלם מ2 מחזירה כלום <br />
                                הדפס (מ1 + מ2) <br />
                                תחזיר <br />
                            </div>

                            <p>
                                אותו רעיון יעבוד גם עם 3 קלטים ויותר. <br /> <br />
                                נקודה חשובה שצריך לשים לב אליה היא שבתוך פונקציות אין שום בעיה להשתמש בתנאים, לולאות, ואפילו לקרוא לפונקציות נוספות. האמת היא שזו הדרך הנפוצה לכתיבת קוד כיום ברוב שפות התכנות ומומלץ להתרגל אליה.
                            </p>

                            <h4>תרגילים</h4>

                            <ul className="exercise-bullet-points">
                                <li>כתבו פונקציה שמקבלת מספר שלם, ומחזירה אמת אם הוא זוגי ושקר אם הוא אי-זוגי.</li>
                                <li>כתבו פונקציה שמקבלת מספר ומחזירה אמת אם הוא ראשוני, ושקר אחרת. השתמשו בה כדי להדפיס את כל המספרים הראשוניים הדו ספרתיים.</li>
                            </ul>

                            <h4>רקורסיה</h4>

                            <p className="mb-0">
                                הנושא הזה מתקדם יותר ומתאים יותר למי שהבינו טוב את נושא הפונקציות או שיש להם כבר רקע מוקדם בתכנות. <br /> <br />
                                ראינו קודם שניתן לקרוא לפונקציה מתוך פונקציה אחרת, אך האמת היא שאפשר אפילו לקרוא פונקציה מתוך אותה הפונקציה! זה שמע מאוד מוזר, אבל יש לכך כל מיני שימושים. לפונקציה כזאת קוראים פונקציה רקורסיבית. דוגמה:
                            </p>

                            <div class="code-snippet">
                                משתנה שלם תשובה = 1 <br />
                                הפעל עצרת עם 5 <br />
                                הדפס תשובה <br />
                                צא <br />
                                <br />
                                פונקציה עצרת מקבלת שלם מ מחזירה כלום <br />
                                אם (מ &gt; 1) <br />
                                תשובה = תשובה * מ <br />
                                הפעל עצרת עם (1 - מ) <br />
                                אחרת <br />
                                סוף <br />
                                תחזיר
                            </div>

                            <p>
                                קטע הקוד הזה מחשב ומדפיס את !5.
                            </p>
                        </section>

                        <section id="tutorial-page-lists">
                            <h1>רשימות</h1>

                            <p>
                                דמיינו שבקוד שלכם אין רק סיסמא אחת, אלא יש 100 סיסמאות. אנחנו יכולים לשמור אותן ב- 100 משתנים שונים, אבל זה מאוד מסורבל ולא נוח. היינו רוצים לארגן אותם ברשימה אחת שתכיל את כל הרשימות, ונוכל בקלות לגשת לכל איבר בה ולהוסיף\למחוק ממנה. האפשרות הזו קיימת ב Ivrit! <br /> <br />
                                ב Ivrit יש 4 סוגי רשימות: רשימת מספרים שלמים, רשימת מספרים עשרוניים, רשימת משפטים ורשימת טענות.
                            </p>

                            <h4>יצירת רשימה</h4>

                            <p className="mb-0">
                                כך יוצרים רשימה:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה סוג שם_המשתנה = [ערך1, ערך2, ערך3 ...]
                            </div>

                            <p className="mb-0">
                                כאשר סוג הוא אחד מבין: שלם, עשרוני, משפט, טענה, והערכים שבתוך הסוגריים המרובעים מתאימים לסוג הזה. אפשר לבחור כמה ערכים שנרצה, כולל אפס. <br />
                                ניתן להדפיס את הרשימה כמו כל משתנה, כך:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה שלם מ = [1, 2, 3, 4, 5] <br />
                                הדפס מ
                            </div>

                            <p className="mb-0">
                                קטע הקוד הזה ידפיס: [1, 2, 3, 4, 5]. <br />
                            </p>

                            <h4>גישה לרשימה</h4>

                            <p>
                                אם אנחנו רוצים לקבל גישה לאיבר מסוים ברשימה אפשר לעשות זאת באמצעות המילה "במקום". <br /> <br />
                                דוגמה 1:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה שלם מ_ר = [10, 20, 30, 40, 50] <br />
                                הדפס מ_ר במקום 3 <br />
                                משתנה שלם מ_שלם = (מ_ר במקום 4) + 5 <br />
                                הדפס מ_שלם
                            </div>

                            <p>
                                כך אפשר להדפיס ולקרוא איברים מסוימים מתוך הרשימה. נשים לב שבשביל לעשות זאת אנחנו צריכים לדעת את המיקום של האיבר ברשימה. האיבר הראשון נמצא במקום 1, האיבר השני במקום 2, וכן הלאה. <br />
                                כמובן שאת המיקום שניגשים אליו ניתן לשמור במשתנה ולעדכן במהלך הריצה. <br /> <br />
                                חשוב לשים לב לא לנסות לגשת לאיבר שלא קיים ברשימה. זה עלול לגרום לתכנית לקרוס!
                            </p>

                            <h4>הוספה והסרה מרשימה</h4>

                            <p className="mb-0">
                                ישנן שלוש אפשרויות להוספה של איבר לרשימה:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה שלם מ_ר = [1, 2, 3] <br />
                                הדפס מ_ר <br />
                                הוסף 4 לתחילת מ_ר <br />
                                הדפס מ_ר <br />
                                הוסף 5 לסוף מ_ר <br />
                                הדפס מ_ר <br />
                                הוסף 6 במקום 3 של מ_ר <br />
                                הדפס מ_ר
                            </div>

                            <p className="mb-0">
                                בהתחלה יודפס [1, 2, 3]. בשורה 3 מוסיפים 4 לתחילת הרשימה ולכן בשורה 4 יודפס [4, 1, 2, 3]. בשורה 5 מוסיפים 5 לסוף הרשימה הזו ולכן בשורה 6 יודפס [4, 1, 2, 3, 5]. האיבר השלישי של הרשימה הזו הוא 2, ולכן בשורה 7 מוסיפים את 6 במקום השלישי ודוחפים את השאר קדימה, כלומר בשורה 8 יודפס [4, 1, 6, 2, 3, 5]. <br /> <br />
                                אם אנחנו רוצים לשנות את הערך במקום מסוים של רשימה ניתן לעשות זאת כך:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה שלם מ_ר = [1, 2, 3, 4, 5] <br />
                                מ_ר במקום 3 = 30 <br />
                                הדפס מ_ר
                            </div>

                            <p>
                                קטע הקוד הזה משתנה את האיבר השלישי של הרשימה ל- 30, ולכן בסופו יודפס [1, 2, 30, 4, 5]. <br /> <br />
                                בשביל להסיר איבר מרשימה צריך להשתמש במילה "הסר", באופן דומה מאוד להוספה:
                            </p>

                            <div class="code-snippet">
                                משתנה רשימה שלם מ_ר = [1, 2, 3, 4, 5] <br />
                                הדפס מ_ר <br />
                                הסר מתחילת מ_ר <br />
                                הדפס מ_ר <br />
                                הסר מסוף מ_ר <br />
                                הדפס מ_ר <br />
                                הסר ממקום 2 של מ_ר <br />
                                הדפס מ_ר
                            </div>

                            <p>
                                בתחילת הקוד נדפיס כמובן את הרשימה [1, 2, 3, 4, 5]. בשורה השלישית אנחנו מוחקים את האיבר הראשון שלה, ולכן בשורה הרביעית יודפס [2, 3, 4, 5]. בשורה החמישית מוחקים את האיבר האחרון של הרשימה הזאת, ולכן בשורה השישית יודפס [2, 3, 4]. בשורה השביעית אנחנו מוחקים את האיבר השני ברשימה הזאת, ולכן בשורה השמינית יודפס [2, 4].
                            </p>

                            <p>
                                חשוב לציין שכל אלו עובדים בצורה זהה גם עבור רשימות של עשרוניים, משפטים וטענות.
                            </p>
                        </section>
                    </main>

                </div>
            </div>

            
        </div>
    )
}

export default Tutorial;
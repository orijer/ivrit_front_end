function Tutorial() {
    return (
        <div>
            <h1>הקדמה</h1>
            <p>
                שפות תכנות הן שפות לכל דבר ועניין, אך במקום לשמש לתקשורת בין אנשים אנו משתמשים בהן בשביל להסביר למחשב מה לעשות. <br />
                בעזרתן יוצרים אתרים (כמו האתר הזה ממש), משחקים, אפליקציות, ועוד. <br /> <br />
                יש מבחר גדול של שפות תכנות, כמו JAVA, C, PYTHON ועוד, אך אנחנו נלמד פה איך להשתמש בשפה פשוטה בשם Ivrit, שכל המילים והפקודות בה הן בעברית. היא שפה מספיק פשוטה כדי שכל אחד יוכל ללמוד אותה, אפילו בלי ניסיון קודם בתכנות. <br />
                מומלץ לפתוח בדפדפן חלונית נוספת עם עמוד העורך, שם תוכלו להריץ את הקוד שכתוב כאן, ותוכלו אפילו לשנות אותו ולראות איך זה משפיע על התכנית.
            </p>

            <p>
                כל תוכנית מורכבת משורות. התכנית מתחילה לפעול מהשורה הראשונה בקובץ, ולאחר ביצוע כל שורה מתקדמים לשורה שמתחתיה. כל שורה מכילה פקודה, שאותן נלמד בעמוד הזה לאט לאט. חשוב לשים לב שבכל שורה יכולה להיות לכל היותר פקודה אחת בלבד- שורות ריקות מתקבלות ולמעשה לא עושות כלום.
            </p>

            <h1>הדפסות</h1>
            <p>
                הדבר הבסיסי ביותר בכל שפת תכנות הוא כתיבה אל המסך באמצעות קוד. לדבר הזה קוראים הדפסה. <br />
                למזלנו, הדפסות בעברית הן פשוטות מאוד! כל מה שצריך הוא לכתוב בשורה את המילה `הדפס` ומיד אחריה את מה שאנחנו רוצים לכתוב אל המסך. <br /> <br />
                דוגמה 1:
            </p>
            <div class="code-snippet">
                הדפס 8
            </div>

            <p>
                קטע הקוד הזה ידפיס = יכתוב למסך את המספר 8. <br />
                דוגמה 2:
            </p>
            <div class="code-snippet">
                הדפס 13.72
            </div>
            <p>
                קטע הקוד הזה ידפיס = יכתוב למסך את המספר 13.72. <br />
                דוגמה 3:
            </p>
            <div class="code-snippet">
                הדפס "שימו לב, טקסט צריך להכיל מסביבו מרכאות בהדפסה"
            </div>
            <p>
                קטע הקוד הזה ידפיס את המשפט שכתוב בתוך המרכאות. שימו לב שהמרכאות הכרחיות פה. הקוד לא יעבוד כרצוי בלעדיהן! <br />
            </p>

            <h4>תרגילים</h4>
            {/* TODO: add */}

            <h1>משתנים</h1>
            <p>
                זה עובד טוב, אבל תדמיינו שאתם עכשיו מתכנתים משחק ואתם בוחרים להדפיס את השם שלכם במאה מקומות בקוד. אם יום אחד תרצו לשנות את השם שלכם, תצטרכו לעבור על כל מאה השורות האלו באופן ידני ולשנות את השם לשם החדש. זה מאוד בזבזני ולא נוח. במקום, אפשר להשתמש במשתנים. <br />
                משתנים הם הדרך שלנו לשמור ערכים בתוך התוכנה, לשנות אותם ולהשתמש בהם אחר כך בהמשך הקוד. כך למשל, נוכל ליצור משתנה אחד שיכיל את השם שלכם, ולהדפיס אותו ישירות. אם בעתיד תרצו לשנות את השם שלכם תצטרכו לשנות רק שורה אחת בקוד- את השורה של המשתנה! <br /> <br />
                שימוש נוסף וכנראה העיקרי של משתנים הוא בשמירת מצב קיים. ללא משתנים אין לתכנית שלנו יכולת זכרון בכלל, מה שמגביל מאוד את סוג התוכניות שנוכל לכתוב. <br />
                ב Ivrit יש 4 סוגי משתנים: שלמים, עשרוניים, משפטים וטענות. כל סוג של משתנה נקרא טיפוס.
            </p>
            <ul>
                <li>שלמים מכילים מספרים שלמים כמו 0, 5, 1234567890, אך גם מספרים שליליים כמו 5-, 924-.</li>
                <li>עשרונים מכילים מספרים עשרוניים (לא שלמים) כמו 0.3, 178.9, 31.7-</li>
                <li>משפטים מכילים מילים כמו "חתול", "ילד וילדה". חשוב לשים לב לגרשיים.</li>
                <li>טענות הם תמיד או אמת או שקר. אלה שני הערכים היחידים עבור משתנים מטיפוס טענות, ויש להם שימושים מיוחדים בשפה.</li>
            </ul>

            <h4>יצירת משתנים</h4>
            <p>
                בשביל להגדיר משתנה נשתמש בפקודה הבאה: `משתנה (טיפוס המשתנה) (שם המשתנה) = ערך` <br />
                דוגמה 1:
            </p>
            <div class="code-snippet">
                משתנה שלם מ_שלם = 5
            </div>
            <p>
                הקוד הזה מייצר משתנה חדש בשם מ_שלם, שמכיל מספרים שלמים. הערך שאנחנו נותנים לו הוא 5. אנחנו יכולים לבחור איזה שם שנרצה למשתנה, אך כדאי לתת לו שם הגיוני שמסביר על התפקיד שלו בקוד. חשוב לשים לב ששם המשתנה חייב להיות מילה אחת ללא רווחים, ושהערך שנתנו לו (במקרה הזה 5), מתאים לטיפוס של המשתנה (במקרה הזה שלם, ואכן 5 הוא מספר שלם). אי עמידה בתנאים הלה עלולה לגרום לתכנית שלנו לקרוס בזמן לא צפוי. <br />
                דוגמה 2:
            </p>
            <div class="code-snippet">
                משתנה עשרוני פאי = 3.1415
            </div>
            <p>
                הקוד הזה מייצר משתנה חדש בשם פאי, שמכיל מספרים עשרוניים. הערך שאנחנו נותנים לו הוא 3.1415. <br />
                דוגמה 3:
            </p>
            <div class="code-snippet">
                משתנה משפט תאריך = "היום התאריך: 5.6.2025"
            </div>
            <p>
                הקוד הזה מייצר משתנה חדש בשם תאריך, שמכיל משפטים. שימו לב למרכאות- בלעדיהן הקוד לא היה עובד. <br />
                דוגמה 4:
            </p>
            <div class="code-snippet">
                משתנה טענה מ_טענה = אמת
            </div>
            <p>
                הקוד הזה מייצר משתנה חדש בשם מ_טענה, שמכיל טענות. חשוב לשים לב שאחרי השווה יכולנו לשים רק את אמת או את שקר ולא שום ערך אחר. בנוסף, אם יצנו משתנה לא ניתן ליצור משתנה נוסף עם אותו שם, אפילו אם מנסים להשתמש בטיפוס אחר.
            </p>

            <h4>שימוש במשתנים</h4>
            <p>
                הדפסת הערך של משתנה היא מאוד פשוטה. אם נחזור לדוגמה 1, ביצוע הפקודה: `הדפס מ_שלם` תדפיס למסך את הערך 5 כפי שהיינו מצפים. <br /> <br />
                ייתכן ובמהלך ריצת התכנית נרצה לעדכן את הערך של משתנה- למשל דמיינו שאתם מתכנתים משחק, היה מאוד הגיוני לשמור את החיים של השחקן במשתנה מסוג שלם, ולעדכן אותו במהלך המשחק. גם זה מאוד פשוט בעברית ברגע שכבר יצרנו את המשתנה. <br />
                דוגמה 1:
            </p>
            <div class="code-snippet">
                משתנה שלם כסף = 100 <br />
                כסף = 200
            </div>
            <p>
                הקוד הזה מגדיר משתנה בשם כסף עם הערך 100, והמשך משנה את הערך להיות 200. נשים לב שבזמן שינוי המשתנה כסף משתמשים רק בשמו. לא צריך להשתמש במילה משתנה ולא בטיפוס שלו בזמן השינוי. <br />
                דוגמה 2:
            </p>
            <div class="code-snippet">
                משתנה שלם כסף = 100 <br />
                כסף = כסף + 50
            </div>
            <p>
                הדוגמה הזאת כבר יותר מורכבת, וכדאי לקרוא אותה משמאל לימין. קודם מחשבים את כסף + 50. כיוון שהערך של כסף באותו זמן הוא 100, החישוב נותן לנו את הערך 150. התוצאה הזאת מוכנסת לתוך כסף ולכן בסוף השרה השנייה הערך של כסף הוא 150. <br />
                דוגמה 3:
            </p>
            <div class="code-snippet">
                משתנה שלם מ1 = 1 <br />
                מ1 = מ1 * 2 <br />
                משתנה שלם מ2 = 1 <br />
                מ2 = מ2 + מ2
            </div>
            <p>
                הקוד הזה מתחיל בליצור את המשתנה מ1 עם הערך 1, ובשורה השנייה מכפיל את ערכו ב 2. לכן הערך של מ1 בסוף התוכנית הוא 2. בשורה השלישית נוצר משתנה חדש בשם מ2 שגם הערך שלו הוא 1. בשורה הרביעית הופכים את הערך שלו להיות מ2+מ2 שזה למעשה 1+1, אז גם הערך של מ2 בסוף התכנית הוא 2. <br />
                בדיוק באותו אופן ניתן לעשות חיסור וחילוק. <br /> <br />
                עשרוניים עובדים בצורה זהה לחלוטין. <br />
                דוגמה 4:
            </p>
            <div class="code-snippet">
                משתנה משפט מ = "שבת " <br />
                מ = מ + "שלום"
            </div>
            <p>
                חיבור משפטים נקרא שרשור, וכתוצאה ממנו מקבלים משפט חדש שמכיל את המשפט הימני, ומיד אחריו את המשפט השמאלי. לכן הערך הסופי של מ בדוגמה הנ"ל יהיה "שבת שלום". <br />
                דוגמה 5: 
            </p>
            <div class="code-snippet">
                משתנה טענה מ = אמת <br />
                מ = מ וגם שקר <br />
                מ = מ או אמת
            </div>
            <p>
                על טענות יש שתי פעולות עיקריות: "וגם", "או". פעולת "וגם" מחזירה אמת אם גם מימינה וגם משמאלה יש אמת, ואחרת היא מחזירה שקר. אז אמת וגם שקר הוא שקר, שקר וגם שקר הוא שקר, ורק אמת וגם אמת היא אמת. <br />
                פעולת "או" מחזירה אמת אם מימינה או משמאלה (או שניהם) הם אמת. אז שקר או שקר הוא שקר, אבל שקר או אמת הוא אמת, וגם אמת או אמת הוא אמת. לכן, לאחר ביצוע השורה השנייה הערך של מ יהיה שקר כי אמת וגם שקר הוא שקר, ולאחר ביצוע השורה השלישית הערך של מ יהיה אמת כי שקר או אמת הוא אמת. <br />
                דוגמה 6:
            </p>
            <div class="code-snippet">
                משתנה שלם מ1 = 5 <br />
                מתשנה שלם מ2 = 10 <br />
                משתנה שלם סכום = מ1 + מ2
            </div>
            <p>
                בסוף הקוד הזה הערך של סכום יהיה 15, שזה באמת הערך של מ1 ועוד ערך של מ2. <br /> <br />
                ייתכן ונרצה לעשות יותר מפעולה אחת באותה השורה, למשל להכפיל משתנה ב 2 ולהוסיף למכפלה 5. בשביל לבצע זאת בסדר הנכון עלינו להשתמש בסוגריים, כך:
            </p>
            <div class="code-snippet">
                משתנה שלם מ1 = 5 <br />
                מ1 = (מ1 * 2) + 5
            </div>
            <p>
                בסוף הקוד הזה הערך של מ1 יהיה 15, כפי שהיינו מצפים. <br /> <br />
            </p>

            <h4>מחיקה</h4>
            <p>
                עד עכשיו ראינו איך ליצור משתנים, אך יש מקרים שבהם נרצה דווקא למחוק משתנים מהתכנית שלנו. בשביל לעשות זאת נשתמש בפקודה מחק, ואחריה את שם המשתנה שנרצה למחוק. דוגמה:
            </p>
            <div class="code-snippet">
                משתנה שלם מ1 = 5 <br />
                מחק מ1 <br />
                משתנה עשרוני מ1 = 10
            </div>
            <p>
                השורה הראשונה מייצרת משתנה חדש בשם מ1. השורה השנייה מוחקת אותו מהתכנית, כך שלא ניתן יותר להשתמש במשתנה שנוצר בשורה הראשונה. מכיוון שמחקנו את המשתנה מהתכנית, ניתן עכשיו להגדיר משתנה חדש עם אותו השם בלי בעיה.
            </p>

            <h4>תרגילים</h4>
            {/* TODO: add */}

            <h1>קבועים</h1>
            <p>
                יש מקרים שבהם נרצה לשמור מידע במהלך התכנית, אך המידע הזה לא צריך להשתנות. בשביל זה ניתן להשתמש בקבוע במקום במשתנה. מהרגע שהקבוע נוצר לא ניתן לשנות את ערכו בשום צורה. יוצרים קבועים באותה דרך שבה יוצרים משתנים, רק שאת המילה "משתנה" מחליפים במילה "קבוע". דוגמה: 
            </p>
            <div class="code-snippet">
                קבוע עשרוני פאי = 3.1415
            </div>
            <p>
                הקוד הזה מייצר קבוע בשם פאי שמכילאת הערך 3.1415, ולא ניתן לשנות אותו בהמשך התכנית. זה גם הגיוני, שכן הקבוע המתמטי פאי אינו אמור להשתנות במהלך התכנית, ולכן אין סיבה להגדיר אותו כמשתנה ולא כקבוע.
            </p>

            <h1>קלט</h1>
            <p>
                עד עכשיו ראינו רק תכניות עצמאיות, שלא היו צריכות מידע נוסף מתחילתן ועד סופן. לפעמים דווקא נרצה שתכנית תחכה שמשתמש יכתוב לה משהו, למשל מה שמו או מה הסיסמה שלו. בשביל זה ניתן להשתמש בפקודה קלוט-ל. דוגמה: 
            </p>
            <div class="code-snippet">
                משתנה שלם מ = 0 <br />
                קלוט-ל מ <br />
                הדפס מ
            </div>
            <p>
                התכנית הזאת מתחילה בלהגדיר משתנה חדש בשם מ שיכיל מספרים שלמים. נתנו לו את הערך 0, אך יכולנו לבחור כל ערך וזה לא היה משנה דבר. לאחר מכן השתמשנו בפקודה "קלוט-ל" ביחד עם שם המשתנה. כשהמחשב יריץ את הפקודה הזאת הוא יחכה שהמשתמש יתן ערך נוסף. בעורך שבאתר ניתן להכניס את הערך הזה בתיבת הטקסט שבשמאל הדף ולשלוח בעזרת הכפתור הצמוד. כשהמחשב יקבל את הקלט הנוסף הוא ישנה את ערכו של מ אל הערך הזה, ורק לאחר מכן ימשיך לשורה הבאה, בה נדפיס את הערך שהוכנס על די המשתמש.
            </p>
        </div>
    )
}

export default Tutorial;